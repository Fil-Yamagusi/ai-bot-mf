#!/usr/bin/env python3.12
# -*- coding: utf-8 -*-
"""2024-03-05 Fil - Future code Yandex.Practicum
Multi-functional AI-bot
README.md for more

Fil FC AI multi-functional
@fil_fc_ai_mf_bot
https://t.me/fil_fc_ai_mf_bot
"""
__version__ = '0.3'
__author__ = 'Firip Yamagusi'

from time import time, strftime

import logging
from telebot import TeleBot
from telebot.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, Message

from config import TOKEN_MF
from gpt_ai_mf import count_tokens, get_resp

bot_name = "Fil FC AI multi-functional | @fil_fc_ai_mf_bot"
# –î–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª–∏
log_file = "bot_ai_mf_log.txt"
logging.basicConfig(
    level=logging.WARNING,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    datefmt="%F %T",
    filename=log_file,
    filemode="w",
)

logging.warning(f"–ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω")
logging.warning(f"TOKEN = {TOKEN_MF}")

bot = TeleBot(TOKEN_MF)

# –ü—É—Å—Ç–æ–µ –º–µ–Ω—é, –º–æ–∂–µ—Ç –ø—Ä–∏–≥–æ–¥–∏—Ç—å—Å—è
hideKeyboard = ReplyKeyboardRemove()

# –î–≤–∞ –º–µ–Ω—é –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —É—Ä–æ–≤–Ω—è —Å–æ–≤–µ—Ç–æ–≤
markupSettings = ReplyKeyboardMarkup(
    row_width=3,
    resize_keyboard=True)
Categories = ["–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ñ–∏–≤–æ–ø–∏—Å—å", "–ò—Å—Ç–æ—Ä–∏—è"]
Levels = ["–î–∏—Ç—è—Ç–∫–æ", "–®–∫–æ–ª—è—Ä", "–°–∫—É–±–µ–Ω—Ç"]
markupSettings.add(*Categories)
markupSettings.add(*Levels)

system_content = {
    Categories[0]:
        '–¢—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è '
        '–≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ - —Å—Ç–∏–ª—è—Ö, –ø–µ—Ä—Å–æ–Ω–∞–∂–∞—Ö, —Å—é–∂–µ—Ç–∞—Ö, –±–∏–æ–≥—Ä–∞—Ñ–∏—è—Ö –∞–≤—Ç–æ—Ä–æ–≤, '
        '–æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö –ø–æ—è–≤–ª–µ–Ω–∏—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–π. '
        '–û—Ç–≤–µ—á–∞–π –Ω–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
    Categories[1]:
        '–¢—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è '
        '–≤ –∂–∏–≤–æ–ø–∏—Å–∏ - —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö –∏ –ø—Ä–∏—ë–º–∞—Ö, —Å—é–∂–µ—Ç–∞—Ö, –≥–µ—Ä–æ—è—Ö '
        '–ø–æ–ª–æ—Ç–µ–Ω, –±–∏–æ–≥—Ä–∞—Ñ–∏—è—Ö —Ö—É–¥–æ–∂–Ω–∏–∫–æ–≤, –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞—Ö —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö '
        '–∫–∞—Ä—Ç–∏–Ω. '
        '–û—Ç–≤–µ—á–∞–π –Ω–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
    Categories[2]:
        '–¢—ã - –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ—Ç—Å—è '
        '–≤ –º–∏—Ä–æ–≤–æ–π –∏—Å—Ç–æ—Ä–∏–∏. –¢—ã –∑–Ω–∞–µ—à—å –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–ø–æ—Ö–∏, –ø—Ä–∏—á–∏–Ω—ã –∏ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞ '
        '–∏—Ö —Å–º–µ–Ω—ã. –ó–Ω–∞–µ—à—å –¥–∞—Ç—ã —Å–æ–±—ã—Ç–∏–π, –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –ª–∏—á–Ω–æ—Å—Ç–µ–π, '
        '–≤–∑–∞–∏–º–æ—Å–≤—è–∑–∏ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ, —Å–æ—Å–µ–¥—Å–∫–∏–µ, –ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ. –¢–∞–∫–∂–µ –∑–Ω–∞–µ—à—å, –∫–∞–∫ '
        '—É—Å—Ç—Ä–æ–µ–Ω–∞ —Ä–∞–±–æ—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∫–∞: —á—Ç–æ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–∫—Ç–æ–º, –Ω–∞ –∫–∞–∫–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ '
        '–º–æ–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –≤ —Å—É–∂–¥–µ–Ω–∏—è—Ö, –∫–∞–∫–∏–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ –∏—Å—Å–ª–µ–¥—É—é—Ç –ø—Ä–æ—à–ª–æ–µ. '
        '–û—Ç–≤–µ—á–∞–π –Ω–µ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–º–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.',
}
assistant_content = {
    Levels[0]:
        '–ò—Å–ø–æ–ª—å–∑—É–π —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã, –ø–æ–Ω—è—Ç–Ω—ã–µ –¥–∞–∂–µ –º–∞–ª–µ–Ω—å–∫–æ–º—É —Ä–µ–±—ë–Ω–∫—É. –°—Ç–∞—Ä–∞–π—Å—è '
        '–ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –Ω–∞—É—á–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–π, —á—Ç–æ –ø–µ—Ä–µ–¥ '
        '—Ç–æ–±–æ–π —Å –æ—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–º –∫—Ä—É–≥–æ–∑–æ—Ä–æ–º –∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.',
    Levels[1]:
        '–û—Ç–≤–µ—á–∞–π –∫–∞–∫ —Ä–µ–±—ë–Ω–∫—É-–ø–æ–¥—Ä–æ—Å—Ç–∫—É. –û–Ω —É–∂–µ –Ω–µ–ø–ª–æ—Ö–æ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω—ã '
        '—á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è, —á—Ç–æ —Ç–∞–∫–æ–µ –º–æ—Ä–∞–ª—å. –ù–æ –ø—Ä–∏ —ç—Ç–æ–º –∏–∑–±–µ–≥–∞–π –≤ '
        '—Å–≤–æ–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö –≤–∑—Ä–æ—Å–ª—ã—Ö —Ç–µ–º, –∏–∑–ª–∏—à–Ω–µ–π –∂–µ—Å—Ç–æ–∫–æ—Å—Ç–∏ –∏–ª–∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ—Å—Ç–∏.',
    Levels[2]:
        '–û—Ç–≤–µ—á–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–µ—Ä—å—ë–∑–Ω–æ –∏ –ø–æ –¥–µ–ª—É, –∫–∞–∫ –±—É–¥—Ç–æ –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π '
        '–æ—á–µ–Ω—å –≤–∑—Ä–æ—Å–ª—ã–π –∏ —ç—Ä—É–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –¢–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å '
        '–µ–º—É –ø–æ–ª–µ–∑–Ω–∞, –∞ –∑–Ω–∞—á–∏—Ç –æ—á–µ–Ω—å —Ç–æ—á–Ω–∞—è –∏ –Ω–µ –æ–∫—Ä–∞—à–µ–Ω–Ω–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ.',
}

# –î–≤–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–∞: more –∏ break
markup = ReplyKeyboardMarkup(
    row_width=2,
    resize_keyboard=True)
markup.add(*["more", "break", ])

user_data = {}
max_tokens_in_task = 50


# –ß–∞—Å—Ç–æ –ø—Ä–∏–¥—ë—Ç—Å—è –∏–∑–≤–∏–Ω—è—Ç—å—Å—è –∑–∞ –º–µ–¥–ª–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–µ—Ä
def send_please_be_patient_message(user_id):
    bot.send_message(
        user_id, 'üôèüèª <b>–Ø –º–µ–¥–ª–µ–Ω–Ω–∞—è —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å, –∑–∞–ø–∞—Å–∏—Ç–µ—Å—å —Ç–µ—Ä–ø–µ–Ω–∏–µ–º</b>',
        parse_mode="HTML")


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def check_user(user_id):
    global user_data
    if user_id not in user_data:
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: user_id={user_id}")
        user_data[user_id] = {}
        user_data[user_id]['category'] = "–ò—Å—Ç–æ—Ä–∏—è"
        user_data[user_id]['level'] = "–®–∫–æ–ª—è—Ä"
        user_data[user_id]['task'] = ""
        user_data[user_id]['answer'] = ""
        user_data[user_id]['busy'] = False
        user_data[user_id]['t_start'] = 0
        user_data[user_id]['t_result'] = 0


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def handle_start(m: Message):
    user_id = m.from_user.id
    check_user(user_id)
    bot.send_message(
        user_id,
        '‚úåüèª –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n\n'
        '–ü–æ–¥—Å–∫–∞–∂—É —Ç–µ–±–µ –≤—Å—è–∫–æ–µ —Ä–∞–∑–Ω–æ–µ –Ω–∞ –º–æ–∏ –ª—é–±–∏–º—ã–µ —Ç–µ–º—ã:\n'
        '<b>‚úçüèª –õ–ò–¢–ï–†–ê–¢–£–†–ê</b>,\n<b>üñº –ñ–ò–í–û–ü–ò–°–¨</b>,\n<b>üìú –ò–°–¢–û–†–ò–Ø</b>.\n\n'
        '–í—ã–±–µ—Ä–∏ —Ç–∞–∫–∂–µ —É—Ä–æ–≤–µ–Ω—å –º–æ–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤:\n'
        '–∫–∞–∫ –¥–ª—è üë∂üèª <b>–î–ò–¢–Ø–¢–ö–ò –Ω–µ—Ä–∞–∑—É–º–Ω–æ–≥–æ</b>,\n'
        '–∫–∞–∫ –¥–ª—è üë¶üèº <b>–ø–æ–¥—Ä–æ—Å—Ç–∫–∞-–®–ö–û–õ–Ø–†–ê –Ω–µ—Å–Ω–æ—Å–Ω–æ–≥–æ</b>, –∞–ª–∏\n'
        '–∫–∞–∫ –¥–ª—è üë®üèª‚Äçüéì <b>–∑–∞–∑–Ω–∞–π–∫–∏-–°–ö–£–ë–ï–ù–¢–ê</b>.\n\n'
        '–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –∏ —É—Ä–æ–≤–µ–Ω—å –º–æ–∂–µ—à—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö: /settings',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['settings'])
def handle_settings(m: Message):
    user_id = m.from_user.id
    check_user(user_id)
    bot.send_message(
        user_id,
        '–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ —É—Ä–æ–≤–µ–Ω—å –º–æ–∏—Ö —Å–æ–≤–µ—Ç–æ–≤. '
        '–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø—Ä–æ <i>–ò–°–¢–û–†–ò–Æ</i> –∫–∞–∫ –¥–ª—è '
        '<i>–æ—Ç—Ä–æ–∫–∞-–®–ö–û–õ–Ø–†–ê</i>.'
        f'–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ:\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{user_data[user_id]['category']}</b>\n'
        f'–£—Ä–æ–≤–µ–Ω—å: <b>{user_data[user_id]['level']}</b>',
        parse_mode="HTML",
        reply_markup=markupSettings)
    bot.register_next_step_handler(m, set_settings)


def set_settings(m: Message):
    user_id = m.from_user.id
    check_user(user_id)
    if m.text not in Categories and m.text not in Levels:
        logging.warning(
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å user_id={user_id} –Ω–µ —Å–º–æ–≥ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        bot.send_message(
            user_id,
            '–û—à–∏–±–∫–∞: –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑',
            parse_mode="HTML",
            reply_markup=hideKeyboard)
        bot.register_next_step_handler(m, handle_settings)
        return
    else:
        if m.text in Categories:
            user_data[user_id]['category'] = m.text
        if m.text in Levels:
            user_data[user_id]['level'] = m.text
    bot.send_message(
        user_id,
        f'–°–µ–π—á–∞—Å –≤—ã–±—Ä–∞–Ω–æ:\n'
        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{user_data[user_id]['category']}</b>\n'
        f'–£—Ä–æ–≤–µ–Ω—å: <b>{user_data[user_id]['level']}</b>',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def handle_help(m: Message):
    user_id = m.from_user.id
    check_user(user_id)
    bot.send_message(
        user_id,
        '–•–æ—á–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å –≥–æ–¥—ã –∂–∏–∑–Ω–∏ –ß–µ—Ö–æ–≤–∞ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –æ—Ç—á–µ—Å—Ç–≤–æ '
        '–ê–π–≤–∞–∑–æ–≤—Å–∫–æ–≥–æ?\n'
        '–í–æ-–ø–µ—Ä–≤—ã—Ö, —Ç—ã - –º–æ–ª–æ–¥–µ—Ü!\n'
        '–í–æ-–≤—Ç–æ—Ä—ã—Ö, –≤—ã–±–µ—Ä–∏ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö (/settings) –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ '
        '—É—Ä–æ–≤–µ–Ω—å –ø–æ—è—Å–Ω–µ–Ω–∏–π, –∞ –ø–æ—Ç–æ–º —Å–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!\n\n'
        '–ü-—Å-—Å. –ï—â—ë –µ—Å—Ç—å —Å–ò–∫—Ä–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /debug',
        parse_mode="HTML",
        reply_markup=hideKeyboard)


# –ß–∞—Å—Ç—å –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è - –°–ò–ö–†–ï–¢–ù–´–ô –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
@bot.message_handler(commands=['debug'])
def handle_start(m: Message):
    user_id = m.from_user.id
    check_user(user_id)

    try:
        with open(log_file, "rb") as f:
            bot.send_document(user_id, f)
    except Exception:
        logging.error(
            f"{user_id}: –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥-—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é")
        bot.send_message(
            user_id,
            f'–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –ª–æ–≥-—Ñ–∞–π–ª',
            reply_markup=hideKeyboard)


# –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
@bot.message_handler(content_types=["text"])
def handle_ask_gpt(m: Message):
    global user_data
    user_id = m.from_user.id
    check_user(user_id)

    # –û–¥–∏–Ω —Ä–∞–∑ –º–æ–¥–µ–ª—å –∑–∞–≤–∏—Å–ª–∞. –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –∫–Ω–æ–ø–∫–∞ –¥–ª—è –æ—Ç—Ç–æ–ø—ã—Ä–∏–≤–∞–Ω–∏—è
    if m.text.lower() in ["break", "/break"]:
        task = ""
        user_data[user_id]['task'] = ""
        user_data[user_id]['answer'] = ""
        user_data[user_id]['busy'] = False
        err_msg = f"{user_id}: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª BREAK"
        logging.warning(err_msg)
        bot.send_message(
            user_id,
            '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n'
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥–æ—á–∫—É –∏ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.')
        return

    # –ß—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏–ª –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if user_data[user_id]['busy']:
        err_msg = f"{user_id}: —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã"
        logging.warning(err_msg)
        bot.send_message(
            user_id,
            f"‚ùé –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.\n "
            f"(–Ω–∞—á–∞—Ç {time() - user_data[user_id]['t_start']:0.2f} —Å–µ–∫ –Ω–∞–∑–∞–¥)")
        return

    # –†—É–≥–∞–µ–º—Å—è, –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ
    try:
        if count_tokens(m.text) > max_tokens_in_task:
            err_msg = f"{user_id}: –∑–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π"
            logging.warning(err_msg)
            bot.send_message(
                user_id,
                '‚ÑπÔ∏è GPT —Å–ª–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –£–∫–æ—Ä–æ—Ç–∏—Ç–µ –µ–≥–æ.')
            return
    except Exception as e:
        err_msg = f"{user_id}: –æ—à–∏–±–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏, –≤—ã—á–∏—Å–ª—è—é—â–µ–π —Ç–æ–∫–µ–Ω—ã"
        logging.warning(err_msg)
        bot.send_message(
            user_id,
            f'‚ùé Error: {e}')
        return

    # –ï—Å–ª–∏ –ø—Ä–æ—Å–∏—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ç–≤–µ—Ç
    if m.text.lower() in ["more", "continue", "/more", "/continue"]:
        if not user_data[user_id]['task']:
            err_msg = strftime("%F %T") + ": asked for more while task is empty"
            logging.warning(err_msg)
            bot.send_message(
                user_id,
                f'–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ù–æ —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á!',
                parse_mode="HTML")
            return
        else:
            bot.send_message(
                user_id,
                '...–ø—Ä–æ–¥–æ–ª–∂–∞—é...')
    else:
        user_data[user_id]['task'] = m.text
        user_data[user_id]['answer'] = ""
        bot.send_message(
            user_id,
            f'–ú–æ—è –∑–∞–¥–∞—á–∞: <i>{user_data[user_id]['task']}</i>',
            parse_mode="HTML")

    user_data[user_id]['busy'] = True

    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º, —á—Ç–æ –±—É–¥–µ—Ç –¥–æ–ª–≥–æ
    send_please_be_patient_message(user_id)

    # –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∫—É—Å–æ–∫ –∫–æ–¥–∞ API GPT –≤ –∫–æ–Ω—Å–æ–ª–∏
    user_data[user_id]['t_start'] = time()
    resp = get_resp(
        system_content[user_data[user_id]['category']],
        assistant_content[user_data[user_id]['level']],
        user_data[user_id]
    )
    user_data[user_id]['t_result'] = time() - user_data[user_id]['t_start']

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π –æ—à–∏–±–æ–∫
    if resp.status_code == 200 and 'choices' in resp.json():
        result = resp.json()['choices'][0]['message']['content']
        if result == "":
            err_msg = f"{user_id}: GPT –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É"
            logging.error(err_msg)
            bot.send_message(
                user_id,
                '‚ÑπÔ∏è –û—Ç–≤–µ—Ç –∑–∞–∫–æ–Ω—á–µ–Ω (–º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)')
        # –í–æ—Ç –≤ —ç—Ç–æ–π –≤–µ—Ç–æ—á–∫–µ —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ
        else:
            user_data[user_id]['answer'] += result
            bot.send_message(
                user_id,
                f"[{user_data[user_id]['t_result']:.2f} —Å–µ–∫]\n\n"
                f"{result.strip()}" ,
                parse_mode="HTML",
                reply_markup=markup)
    else:
        err_msg = f"{user_id}: GPT –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ break"
        logging.error(err_msg)
        bot.send_message(
            user_id,
            f'{err_msg}.\n'
            f'–û—à–∏–±–∫–∞: <b>{resp.json()}</b>',
            parse_mode="HTML")

    user_data[user_id]['busy'] = False


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
